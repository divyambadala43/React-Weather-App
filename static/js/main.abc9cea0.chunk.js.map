{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","name","placeholder","type","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","API_CALL","json","response","console","log","setState","sys","celsius","CalCelsius","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeOfId","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.abc9cea0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>  \r\n                </h5>\r\n                {props.temp_celsius ? <h1 className=\"py-2\"> {props.temp_celsius} </h1> : null }\r\n                { minmaxTemp(props.temp_min, props.temp_max)}\r\n                <h4 className=\"py-3\"> {props.description} </h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if(min && max)\r\n    {\r\n        return(\r\n            <h3>\r\n\r\n            <span className=\"px-4\"> {min}&deg; </span>\r\n            <span className=\"px-4\"> {max}&deg; </span>\r\n           \r\n             </h3>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Weather; ","import React from 'react'\r\nimport './form.style.css'\r\n\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div> {props.error ? error() : null} </div>\r\n            <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                   <input name=\"city\" placeholder=\"City\" type=\"text\" className=\"form-control\" autoComplete=\"off\" /> \r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input name=\"country\" placeholder=\"Country\" type=\"text\" className=\"form-control\" autoComplete=\"off\" /> \r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left \">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City And Country\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react'\nimport Weather from './app_component/weather.component'\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Form from './app_component/form.component'\n\n\nconst API_KEY = \"75f2b1fbb7ed69eb668ac2124877ba98\"\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    }\n\n    //defining className for weather\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n\n    }\n  }\n  //Function to get different weather icons depending in the id of the icon\n  getWeatherIcon(icon, rangeOfId){\n    switch(true){\n      case rangeOfId >= 200 && rangeOfId <= 232 :\n      this.setState({\n        icon: this.weatherIcon.Thunderstorm\n      })\n      break;\n\n      case rangeOfId >= 300 && rangeOfId <= 321 :\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        })\n        break;\n\n        case rangeOfId >= 500 && rangeOfId <= 531 :\n          this.setState({\n            icon: this.weatherIcon.Rain\n          })\n          break;\n\n          case rangeOfId >= 600 && rangeOfId <= 622 :\n            this.setState({\n              icon: this.weatherIcon.Snow\n            })\n            break;\n\n            case rangeOfId >= 701 && rangeOfId <= 781 :\n              this.setState({\n                icon: this.weatherIcon.Atmosphere\n              })\n              break;\n\n              case rangeOfId = 800 :\n                this.setState({\n                  icon: this.weatherIcon.Clear\n                })\n                break;\n\n                case rangeOfId >= 801 && rangeOfId <= 804 :\n                  this.setState({\n                    icon: this.weatherIcon.Clouds\n                  })\n                  break;\n                  default: \n                  this.setState({icon: this.weatherIcon.Clouds})\n\n    }\n  }\n\n  // Converting Temp to deg. Celsius\n  CalCelsius(temp) {\n    let Celsius = Math.floor(temp - 275.15)\n    return Celsius\n  }\n\n  // Fetching data from API\n  getWeather = async (e) => {\n    e.preventDefault()\n\n    //value of input with name=\"city\" in form.component.jsx file\n    const city = e.target.elements.city.value\n\n    //value of input with name=\"country\" in form.component.jsx file\n    const country = e.target.elements.country.value\n\n    if(city && country)\n    {\n      const API_CALL = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n\n    const response = await API_CALL.json();\n    console.log(response)\n\n    \n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      celsius: this.CalCelsius(response.main.temp),\n      temp_min: this.CalCelsius(response.main.temp_min),\n      temp_max: this.CalCelsius(response.main.temp_max),\n      description: response.weather[0].description,\n      error: false\n    })\n    \n    \n    this.getWeatherIcon(this.weatherIcon, response.weather[0].id)\n    }\n    else\n    {\n      this.setState({error: true})\n    }\n\n  }\n\n\n  render(){\n\n    return(\n    <div className=\"App\">\n      <Form \n      loadWeather = {this.getWeather}\n      error = {this.state.error}\n      />\n      <Weather\n      //props for weather data\n        city = {this.state.city}\n        country = {this.state.country}\n        temp_celsius = {this.state.celsius}\n        temp_min = {this.state.temp_min}\n        temp_max = {this.state.temp_max}\n        description = {this.state.description}\n        weatherIcon = {this.state.icon}\n        \n      />\n\n    </div>\n\n  )}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}